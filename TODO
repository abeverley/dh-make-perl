* --refresh and core dependencies
  when a dependency module is in the core, do not blindly copy the version
  dependend on to perl-modules dependency, but use the first perl release the
  dependency is included in.
  mapping perl core versions to debian versions would be nice, otherwise we end up
  with something like "perl-modules (>= 5.9.4)" (happened with libparams-classify-perl).
  also, depending on perl-base is perhaps not a good idea
* use Dpkg::Version::vercmp(v1, v2) for comparing versions all over (grep for
  compare)
* investigate using App::Cmd
* ensure (with a test) that dependency lists are indented with one space
* ensure (with a test) that doing a refresh over the debian/ directory produced
  by --make doesn't change anything
* --refresh on MIME-Charset 1.007 can't detect the dist name and cries.
  May be similar to #525847
* when ITP for the package is found, try to deduce short/long description from
  the bug report
* add new command, --trace-depends. To be used like

   dh-make-perl --trace-depends --cpan Foo-Bar

  it shall output a tree-like structure of missing dependencies without
  preparing any packaging yet
* when a dependency is not packaged, search wnpp's bugs and report if there is
  ITP about the package
* versioned dependencies should add the epochs too (found in
  libpoex-role-sessioninstantiation-perl, where META.yml and Build.PL
  request 'POE 1.005' which should translate to "libpoe-perl (>= 2:1.0050)")
* package_already_exists(): maybe search for the module and not the package name;
  otherwise existing packages are missed that have a different name (cf. #530675)
--refresh: add --only <file> option making --refresh update only specified file
